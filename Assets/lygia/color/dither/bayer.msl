#include "../../math/mod.msl"
#include "../../math/decimate.msl"

/*
contributors: Patricio Gonzalez Vivo
description: Dither using a 8x8 Bayer matrix
use:
    - <float4|float3|float> ditherBayer(<float4|float3|float> value, <float2> st, <float> time)
    - <float4|float3|float> ditherBayer(<float4|float3|float> value, <float2> st)
    - <float> ditherBayer(<float2> xy)
options:
    - DITHER_BAYER_PRECISION
examples:
    - /shaders/color_dither_bayer.frag
license:
    - Copyright (c) 2021 Patricio Gonzalez Vivo under Prosperity License - https://prosperitylicense.com/versions/3.0.0
    - Copyright (c) 2021 Patricio Gonzalez Vivo under Patron License - https://lygia.xyz/license
*/


#ifndef DITHER_BAYER_PRECISION
#ifdef DITHER_PRECISION
#define DITHER_BAYER_PRECISION DITHER_PRECISION
#else
#define DITHER_BAYER_PRECISION 256
#endif
#endif

#ifndef FNC_DITHER_BAYER
#define FNC_DITHER_BAYER

float ditherBayer(const float2 xy) {
    float x = mod(xy.x, 8.0);
    float y = mod(xy.y, 8.0);
    return  mix(mix(mix(mix(mix(mix(0.0,32.0,step(1.0,y)),mix(8.0,40.0,step(3.0,y)),step(2.0,y)),mix(mix(2.0,34.0,step(5.0,y)),mix(10.0,42.0,step(7.0,y)),step(6.0,y)),step(4.0,y)),mix(mix(mix(48.0,16.0,step(1.0,y)),mix(56.0,24.0,step(3.0,y)),step(2.0,y)),mix(mix(50.0,18.0,step(5.0,y)),mix(58.0,26.0,step(7.0,y)),step(6.0,y)),step(4.0,y)),step(1.0,x)),mix(mix(mix(mix(12.0,44.0,step(1.0,y)),mix(4.0,36.0,step(3.0,y)),step(2.0,y)),mix(mix(14.0,46.0,step(5.0,y)),mix(6.0,38.0,step(7.0,y)),step(6.0,y)),step(4.0,y)),mix(mix(mix(60.0,28.0,step(1.0,y)),mix(52.0,20.0,step(3.0,y)),step(2.0,y)),mix(mix(62.0,30.0,step(5.0,y)),mix(54.0,22.0,step(7.0,y)),step(6.0,y)),step(4.0,y)),step(3.0,x)),step(2.0,x)),mix(mix(mix(mix(mix(3.0,35.0,step(1.0,y)),mix(11.0,43.0,step(3.0,y)),step(2.0,y)),mix(mix(1.0,33.0,step(5.0,y)),mix(9.0,41.0,step(7.0,y)),step(6.0,y)),step(4.0,y)),mix(mix(mix(51.0,19.0,step(1.0,y)),mix(59.0,27.0,step(3.0,y)),step(2.0,y)),mix(mix(49.0,17.0,step(5.0,y)),mix(57.0,25.0,step(7.0,y)),step(6.0,y)),step(4.0,y)),step(5.0,x)),mix(mix(mix(mix(15.0,47.0,step(1.0,y)),mix(7.0,39.0,step(3.0,y)),step(2.0,y)),mix(mix(13.0,45.0,step(5.0,y)),mix(5.0,37.0,step(7.0,y)),step(6.0,y)),step(4.0,y)),mix(mix(mix(63.0,31.0,step(1.0,y)),mix(55.0,23.0,step(3.0,y)),step(2.0,y)),mix(mix(61.0,29.0,step(5.0,y)),mix(53.0,21.0,step(7.0,y)),step(6.0,y)),step(4.0,y)),step(7.0,x)),step(6.0,x)),step(4.0,x)) / (64.0);
}

float3 ditherBayer(float3 color, const float2 xy, const int pres) {
    float d = float(pres);
    float3 decimated = decimate(color, d);
    float3 diff = (color - decimated) * d;
    float3 ditherPattern = float3(ditherBayer(xy));
    return decimate(color + (step(ditherPattern, diff) / d), d);
}

float ditherBayer(const float val, const float2 xy) { return ditherBayer(float3(val), xy, DITHER_BAYER_PRECISION).r; }
float3 ditherBayer(const float3 color, const float2 xy) {  return ditherBayer(color, xy, DITHER_BAYER_PRECISION); }
float4 ditherBayer(const float4 color, const float2 xy) {  return float4(ditherBayer(color.rgb, xy, DITHER_BAYER_PRECISION), color.a); }
#endif
